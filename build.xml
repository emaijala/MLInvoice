<?xml version="1.0" encoding="UTF-8"?>
<project name="MLInvoice" basedir="." default="main">
  <property name="tmp" value="/tmp" />
  <property name="package"  value="${phing.project.name}" override="true" />
  <property name="php-cs-fixer-extra-params" value=""/>
  <property name="basedir"   value="${project.basedir}" override="true" />
  <!--
    Continuous integration test database settings.
    *** N.B. Running CI will overwrite the database ***
  -->
  <property name="dbname" value="mlinvoice_test_987" />
  <property name="dbuser" value="mlinvoicetest" />
  <property name="dbpass" value="testpass" />
  <property name="dbhost" value="localhost" />
  <property name="dbrootuser" value="" /> <!-- not needed if using login credentials -->
  <property name="dbrootpass" value="" /> <!-- not needed if using login credentials -->
  <property name="overwrite-config" value="0" override="true" />

  <!-- We only need the credentials if the password is non-blank -->
  <if>
    <not>
      <equals arg1="${dbrootuser}" arg2="" />
    </not>
    <then>
      <property name="dbcredentials" value="-u ${dbrootuser}" />
    </then>
    <else>
      <property name="dbcredentials" value="" />
    </else>
  </if>
  <if>
    <not>
      <equals arg1="${dbrootpass}" arg2="" />
    </not>
    <then>
      <property name="dbcredentials" value="${dbcredentials} -p ${dbrootpass}" />
    </then>
  </if>

  <!-- Main Target -->
  <target name="main" description="main target">
    <echo>No main build target. Use qa for normal tests.</echo>
  </target>

  <!-- QA Checks -->
  <target name="qa" description="QA checks">
    <!-- Call standard tasks -->
    <phingcall target="phpunit"/>
    <phingcall target="eslint"/>
    <phingcall target="phpcs-n"/>
    <phingcall target="php-cs-fixer-dryrun"/>
  </target>

  <!-- CI Checks -->
  <target name="ci" description="CI tests">
    <phingcall target="ci-setup"/>
    <phingcall target="ci-codeception"/>
    <phingcall target="ci-teardown"/>
  </target>

  <!-- CI setup -->
  <target name="ci-setup">
    <!-- fail if there is existing configuration -->
    <if>
      <available file="${basedir}/running-ci" />
      <then>
        <fail>${basedir}/running-ci flag file already exists</fail>
      </then>
    </if>
    <if>
      <and>
        <available file="${basedir}/config.php" />
        <equals arg1="${overwrite-config}" arg2="0" />
      </and>
      <then>
        <fail>config.php already exists</fail>
      </then>
    </if>

    <!-- setup database -->
    <exec executable="mysqladmin">
      <arg line="-h ${dbhost} ${dbcredentials} -f drop ${dbname}" />
    </exec>
    <exec executable="mysqladmin" checkreturn="true" passthru="true">
      <arg line="-h ${dbhost} ${dbcredentials} create ${dbname}" />
    </exec>
    <exec executable="mysql">
      <arg line="-h ${dbhost} ${dbcredentials} -e &quot;DROP USER '${dbuser}'@'${dbhost}'&quot;" />
    </exec>
    <exec executable="mysql" checkreturn="true" passthru="true">
      <arg line="-h ${dbhost} ${dbcredentials} -e &quot;CREATE USER '${dbuser}'@'${dbhost}' IDENTIFIED BY '${dbpass}'&quot;" />
    </exec>
    <exec executable="mysql" checkreturn="true" passthru="true">
      <arg line="-h ${dbhost} ${dbcredentials} -e &quot;GRANT SELECT,INSERT,UPDATE,DELETE,ALTER,CREATE ON ${dbname}.* TO '${dbuser}'@'${dbhost}' WITH GRANT OPTION&quot;" />
    </exec>
    <exec executable="mysql" checkreturn="true" passthru="true">
      <arg line="-h ${dbhost} ${dbcredentials} -D ${dbname} &lt; ${basedir}/tests/fixtures/create_database_29.sql" />
    </exec>

    <!-- update configuration -->
    <copy file="${basedir}/config.php.sample" tofile="${basedir}/config.php" overwrite="true">
      <filterchain>
        <replaceregexp>
          <regexp pattern="//define\('_UI_LANGUAGE_', 'en-US'\);" replace="define('_UI_LANGUAGE_', 'en-US');" />
          <regexp pattern="define\('_DB_SERVER_', 'localhost'\)" replace="define('_DB_SERVER_', '${dbhost}')" />
          <regexp pattern="define\('_DB_USERNAME_', 'mlinvoice'\)" replace="define('_DB_USERNAME_', '${dbuser}')" />
          <regexp pattern="define\('_DB_PASSWORD_', ''\)" replace="define('_DB_PASSWORD_', '${dbpass}')" />
          <regexp pattern="define\('_DB_NAME_', 'mlinvoice'\)" replace="define('_DB_NAME_', '${dbname}')" />
          <regexp pattern="replacewithsomethingsecure" replace="thisisnotreallythatsecurebutokfortesting" />
        </replaceregexp>
      </filterchain>
    </copy>
    <append destFile="${basedir}/config.php" text="define('MLINVOICE_LOGIN_DELAY_MULTIPLIER', 0);${line.separator}" fixlastline="yes" />

    <!-- create flag file -->
    <touch file="${basedir}/running-ci" />
  </target>

  <!-- CI teardown -->
  <target name="ci-teardown">
    <if>
      <not>
        <available file="${basedir}/running-ci" />
      </not>
      <then>
        <fail>${basedir}/running-ci flag file does not exist</fail>
      </then>
    </if>

    <if>
      <not>
        <available file="${basedir}/config.php" />
      </not>
      <then>
        <fail>config.php does not exist</fail>
      </then>
    </if>

    <!-- drop database and user -->
    <exec executable="mysqladmin" checkreturn="true" passthru="true">
      <arg line="-h ${dbhost} ${dbcredentials} -f drop ${dbname}" />
    </exec>
    <exec executable="mysql" passthru="true">
      <arg line="-h ${dbhost} ${dbcredentials} -e &quot;DROP USER '${dbuser}'@'${dbhost}'&quot;" />
    </exec>

    <!-- remove configuration -->
    <delete file="${basedir}/running-ci" />
    <delete file="${basedir}/config.php" />
  </target>

  <!-- codeception -->
  <target name="ci-codeception">
    <exec executable="vendor/bin/codecept" escape="false" checkreturn="true" passthru="true">
      <arg line="--steps run" />
    </exec>
  </target>
  <target name="ci-codeception-coverage">
    <exec executable="vendor/bin/codecept" escape="false" checkreturn="true" passthru="true">
      <arg line="--steps --coverage-html run" />
    </exec>
  </target>

  <!-- phpunit -->
  <target name="phpunit">
    <exec executable="vendor/bin/phpunit" escape="false" checkreturn="true" passthru="true">
      <arg line="tests" />
    </exec>
  </target>

  <!-- eslint -->
  <target name="eslint">
    <exec executable="npx" escape="false" checkreturn="true" passthru="true">
      <arg line="eslint js/mlinvoice.js js/mlinvoice-form.js" />
    </exec>
  </target>
  <target name="eslint-fix">
    <exec executable="npx" escape="false" checkreturn="true" passthru="true">
      <arg line="eslint js/mlinvoice.js js/mlinvoice-form.js --fix" />
    </exec>
  </target>

  <!-- PHP CodeSniffer -->
  <target name="phpcs">
    <exec executable="vendor/bin/phpcs" passthru="true" escape="false" checkreturn="true">
      <arg line="--standard=tests/phpcs-ruleset.xml *.php" />
    </exec>
  </target>
  <!-- PHP CodeSniffer without warnings-->
  <target name="phpcs-n">
    <exec executable="vendor/bin/phpcs" passthru="true" escape="false" checkreturn="true">
      <arg line="--standard=tests/phpcs-ruleset.xml -n *.php" />
    </exec>
  </target>

  <!-- phpcbf -->
  <target name="phpcbf">
    <exec executable="vendor/bin/phpcbf" passthru="true" escape="false">
      <arg line="--standard=tests/phpcs-ruleset.xml *.php" />
    </exec>
  </target>

  <!-- php-cs-fixer (first task applies fixes, second task simply checks if they are needed) -->
  <target name="php-cs-fixer">
    <mkdir dir=".php_cs_cache" />
    <exec executable="vendor/bin/php-cs-fixer" passthru="true" escape="false">
      <arg line="fix --config=tests/php-cs-fixer.config.php -vvv ${php-cs-fixer-extra-params}" />
    </exec>
  </target>

  <target name="php-cs-fixer-dryrun">
    <mkdir dir=".php_cs_cache" />
    <exec executable="vendor/bin/php-cs-fixer" passthru="true" escape="false" checkreturn="true">
      <arg line="fix --config=tests/php-cs-fixer.config.php --dry-run -vvv --diff ${php-cs-fixer-extra-params}" />
    </exec>
  </target>
</project>
